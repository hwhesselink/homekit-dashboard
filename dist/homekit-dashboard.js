(()=>{class StrategyHomekitDashboard{static async generate(e,t){const[n,i]=await Promise.all([t.callWS({type:"config/area_registry/list"}),t.callWS({type:"config/entity_registry/list"})]),a=e.config||{},r=a.home_name||"My Home",s=a.hide_areas,o=a.show_areas,c=a.hide_entities,_=a.show_entities;n.sort(((e,t)=>e.name.toUpperCase().localeCompare(t.name.toUpperCase())));const d=Array.from({length:n.length},((e,t)=>t)),l=Object.fromEntries(d.map((e=>[n[e].area_id,e])));let u=[];o?(u=o.map((e=>l[e])),1!=s&&(u=u.concat(d.filter((e=>!u.includes(e)))))):u=Array.from({length:n.length},((e,t)=>t)),s&&Array.isArray(s)&&(u=u.filter((e=>!s.includes(n[e].area_id))));const m=u.map((e=>n[e])),g=["door","garage","garage_door","gate","lock","tamper","window"],h=a.domain_order||["motion","light","temperature","humidity","fan","climate","lock","security","alarm_control_panel","media_player","irrigation","water"];function y(e){const t=e.entity_id.split(".")[0];return"cover"==t?g.includes(j(e,"device_class"))?"security":"climate":"switch"==t&&j(e,"sprinkler_head_type")?"irrigation":t}const p=[];for(const e of i)null==e.hidden_by&&null==e.disabled_by&&(null==e.area_id&&null!=e.device_id&&(e.area_id=t.devices[e.device_id].area_id),e._domain=y(e),null!=e.area_id&&null!=j(e,"friendly_name")&&u.includes(l[e.area_id])&&p.push(e));p.sort((function(e,t){const n=e._domain,i=t._domain,a=h.indexOf(n),r=h.indexOf(i),s=j(e,"friendly_name").toUpperCase(),o=j(t,"friendly_name").toUpperCase();if(a<0)return r<0?s.localeCompare(o):1;if(a==r){if("light"==n){const n=null!=j(e,"entity_id");if(n!=(null!=j(t,"entity_id")))return n?-1:1}return s.localeCompare(o)}return a<r||r<0?-1:1}));const f=Array.from({length:p.length},((e,t)=>t)),b=Object.fromEntries(f.map((e=>[p[e].entity_id,e])));let v=[];_?(v=_.map((e=>b[e])),1!=c&&(v=v.concat(f.filter((e=>!v.includes(e)))))):v=Array.from({length:p.length},((e,t)=>t)),c&&Array.isArray(c)&&(v=v.filter((e=>!c.includes(p[e].entity_id))));const w=v.map((e=>p[e])),$={hide_dialog_light_color_actions:!0,non_admin_settings:{hide_overflow:!0,hide_sidebar:!0},mobile_settings:{hide_overflow:!0,hide_sidebar:!0}};t.entities["input_boolean.hkdb_show_sidebar"]&&($.entity_settings=[{entity:{"input_boolean.hkdb_show_sidebar":"on"},hide_sidebar:!1}]);const k=a.views||[{area_id:"home",name:r,icon:"mdi:home"},{area_id:"climate",name:"Climate",icon:"mdi:fan",domains:["climate","fan"]},{area_id:"light",name:"Lights",icon:"mdi:lightbulb",domains:["light"]},{area_id:"security",name:"Security",icon:"mdi:security",domains:["alarm_control_panel","lock","security"]},{area_id:"media",name:"Media",icon:"mdi:music",domains:["media_player"]},{area_id:"water",name:"Water",icon:"mdi:water",domains:["irrigation"]}],x=[{area_id:"humidity",name:"Humidity",icon:"mdi:water-percent"},{area_id:"temperature",name:"Temperature",icon:"mdi:thermometer"}];function j(e,n){const i=t.states[e.entity_id];return i?i.attributes[n]:null}m.map((e=>{x.push({area_id:`${e.area_id}_temperature`,name:"Temperature",icon:"mdi:thermometer"}),x.push({area_id:`${e.area_id}_humidity`,name:"Humidity",icon:"mdi:water-percent"})}));const z={};function C(e,t="HEAD"){if(e in z)return z[e];var n=new XMLHttpRequest;return n.open(t,e,!1),n.send(),200==n.status?(z[e]=!0,!0):405==n.status?C(e,"GET"):(z[e]=!1,!1)}function A(e){if(x.indexOf(e)>=0)return{};let t=a.background_images&&a.background_images[e.area_id]||e.picture||a.background_image||a.background_img||"/local/community/homekit-dashboard/view_background.jpg";return C(t)||(t="https://hkdb.anda.nl/images/Wikidata_logo_under_construction_sign_wallpaper.png"),{image:t,alignment:"center",attachment:"fixed",opacity:100,repeat:"repeat",size:"cover"}}return{kiosk_mode:a.kiosk_mode||$,views:k.concat(m).concat(x).map((e=>({strategy:{type:"custom:homekit-dashboard",view:e,views:k,areas:m,lists:x,entities:w,sec_dev_classes:g,options:a},type:"sections",title:e.name,icon:e.icon,path:e.area_id,max_columns:4,subview:m.concat(x).indexOf(e)>=0,background:A(e)})))}}}class StrategyHomekitDashboardView{static async generate(config,hass){const{view,views,areas,lists,entities,sec_dev_classes,options}=config,dashboard_name=hass.panelUrl,rev_open_close=["shade"],sec_dev_cls_str=sec_dev_classes.map((e=>`'${e}'`)),rev_open_close_str=rev_open_close.map((e=>`'${e}'`)),device_class_settings={alarm_control_panel:["mdi:shield-lock","#4caf50","security"],climate:["mdi:thermostat","#2196f3","climate"],cover:["mdi:blinds-horizontal","blue","climate"],fan:["mdi:fan","#4caf50","climate"],humidity:["mdi:water-percent","blue","humidity"],irrigation:["mdi:sprinkler","blue","water"],light:["mdi:lightbulb-multiple","#ff9800","light"],motion:["mdi:motion-sensor","grey","security"],media_player:["mdi:music","grey","media"],security:["mdi:security","#67e3e0","security"],temperature:["mdi:thermometer","blue","temperature"]},view_badges={__all_areas:["temperature","humidity","light","cover","fan","security","media_player","climate","alarm_control_panel","irrigation"],home:["motion","light","fan","cover","security","alarm_control_panel","media_player","climate","irrigation"],climate:["temperature","humidity","fan","cover","climate"],light:["light"],media:["media_player"],security:["motion","security","alarm_control_panel"],water:["fan","humidity","irrigation"],garden:["fan","humidity","irrigation"]};function get_attr(e,t){const n=hass.states[e.entity_id];return n?n.attributes[t]:null}function gen_entity_card(entity,view=null){const domain=entity.entity_id.split(".")[0],on_home_view=null==view||"home"==view.area_id,entity_name=get_attr(entity,"friendly_name"),entity_area=areas.find((e=>e.area_id==entity.area_id)).name.toLocaleLowerCase()||null,gen_func=`gen_${domain}_card`;let card={};try{card=eval(gen_func)(entity,on_home_view)}catch(e){if("ReferenceError"!=e.name)throw e;card=gen_basic_card(entity,on_home_view)}return view&&entity_name.length>entity_area.length+1&&entity_name.toLocaleLowerCase().startsWith(`${entity_area} `)&&(card.name=entity_name.slice(entity_area.length+1)),get_attr(entity,"entity_picture")&&(card.icon_type="entity-picture"),card.card_mod=is_card_active(entity),card}function gen_basic_card(e,t){return{type:"custom:mushroom-entity-card",entity:e.entity_id}}function gen_alarm_control_panel_card(e,t){const n={type:"custom:mushroom-alarm-control-panel-card",entity:e.entity_id};if(!t){const t=get_attr(e,"supported_features"),i=[];1&t&&i.push("armed_home"),2&t&&i.push("armed_away"),4&t&&i.push("armed_night"),n.states=i,n.layout="horizontal"}return n}function gen_climate_card(e,t){const n={type:"custom:mushroom-climate-card",entity:e.entity_id,tap_action:{action:"more-info"}};if(!t){const t=get_attr(e,"hvac_modes");t&&(n.hvac_modes=t),n.layout="horizontal"}return n}function gen_cover_card(e,t){const n={type:"custom:mushroom-cover-card",entity:e.entity_id,show_buttons_control:!t};if(!t){const t=!!(4&get_attr(e,"supported_features"));n.show_position_control=t,n.layout="horizontal"}return n}function gen_fan_card(e,t){const n={type:"custom:mushroom-fan-card",entity:e.entity_id,icon_animation:!0};if(!t){const t=get_attr(e,"supported_features"),i=!!(1&t),a=!!(2&t),r=!!(4&t);n.show_percentage_control=i,n.show_oscillate_control=a,n.show_direction_control=r,n.layout="horizontal"}return n}function gen_light_card(e,t){const n={type:"custom:mushroom-light-card",entity:e.entity_id,use_light_color:!t};if(!t){const t=get_attr(e,"supported_color_modes");if(null!=t){let e=!1,i=!1,a=!1,r=!1,s=t[0];e="onoff"==s,i=["brightness","color_temp","hs","xy","rgb","rgbw","rgbww"].includes(s),a="color_temp"==s,r=["hs","xy","rgb","rgbw","rgbww"].includes(s),n.show_brightness_control=i,n.show_color_temp_control=a,n.show_color_control=r,n.layout=e?"default":"horizontal"}}return n}function gen_lock_card(e,t){return{type:"custom:mushroom-lock-card",entity:e.entity_id,layout:"horizontal",grid_options:{columns:6,rows:1},tap_action:{action:"toggle"}}}function gen_media_player_card(e,t){const n={type:"custom:mushroom-media-player-card",entity:e.entity_id,use_media_info:!0,show_volume_level:!1,icon_type:"entity-picture",tap_action:{action:"more-info"},hold_action:{action:"none"},double_tap_action:{action:"none"}};return t||get_attr(e,"supported_features")&&(n.media_controls=["previous","play_pause_stop","next"],n.layout="horizontal"),n}function gen_sensor_card(e,t){const n=get_attr(e,"device_class");let i={};return null!=n&&(i=gen_sensor_with_devcls_card(e,n,t)),i||gen_basic_card(e,t)}function gen_sensor_with_devcls_card(e,t,n){const i=device_class_settings[t];return i?{type:"custom:mushroom-template-card",entity:e.entity_id,icon:i[0],icon_color:i[1],primary:`{{ state_attr('${e.entity_id}', 'friendly_name') }}`,secondary:`{{ states('${e.entity_id}',  with_unit=True, rounded=True) }}`}:null}function gen_switch_card(e,t){const n={type:"custom:mushroom-entity-card",entity:e.entity_id,tap_action:{action:"toggle"}};return get_attr(e,"sprinkler_head_type")&&(n.icon="mdi:sprinkler-variant"),n}function is_card_active(entity){const domain=entity.entity_id.split(".")[0],gen_func=`is_${domain}_card_active`;let card={};try{card=eval(gen_func)(entity)}catch(e){if("ReferenceError"!=e.name)throw e;card=is_generic_card_active(entity)}return card}function is_generic_card_active(e,t="==",n="on",i=""){return{style:{".":`ha-card {\n                background-color: {{ 'white'\n                                     if states(config.entity)${t}'${n}' else\n                                     'rgba(120, 120, 120, 0.7)' }};\n              }${i}`,"mushroom-state-info$":`.container { {{\n                                   '--card-primary-color: black;\n                                    --card-secondary-color: grey;'\n                                     if states(config.entity)${t}'${n}' else\n                                   '--card-primary-color: white;\n                                    --card-secondary-color: lightgrey;'\n                                 }} }`}}}function is_alarm_control_panel_card_active(e){return is_generic_card_active(e,"!=","disarmed")}function is_cover_card_active(e){const t=get_attr(e,"device_class");return rev_open_close.includes(t)?{style:{".":"ha-card {\n                background-color: {{ 'white'\n                                     if states(config.entity)!='open'\n                                     else 'rgba(120, 120, 120, 0.7)' }};\n              }\n              ha-state-icon {\n                color: {{ 'rgb(var(--rgb-state-cover-open))'\n                          if states(config.entity)!='open'\n                          else 'rgb(var(--rgb-state-cover-closed))'\n                       }};\n              }","mushroom-shape-icon$":".shape {\n                                   background-color: {{ 'rgba(var(--default-blue), 0.2)'\n                                                        if states(config.entity)!='open'\n                                                        else 'var(--shape-color-disabled)'\n                                                     }} !important;\n                                 }","mushroom-state-info$":".container { {{\n                                   '--card-primary-color: black;\n                                    --card-secondary-color: grey;'\n                                     if states(config.entity)!='open' else\n                                   '--card-primary-color: white;\n                                    --card-secondary-color: lightgrey;'\n                                 }} }"}}:is_generic_card_active(e,"!=","closed")}function is_lock_card_active(e){return is_generic_card_active(e,"!=","locked","\nha-card div.actions { display: none; }")}function is_media_player_card_active(e){return is_generic_card_active(e,"==","playing")}function gen_badge(type,view=null){const gen_func=`gen_${type}_badge`;let badge={};try{badge=eval(gen_func)(type,view)}catch(e){if("ReferenceError"!=e.name)throw e;badge=gen_missing_badge(type)}return badge}function gen_missing_badge(e){return{type:"custom:mushroom-template-badge",content:`No badge: ${e}`,icon:"mdi:alert",color:"red"}}function badge_entities(e){return e?`area_entities('${e.area_id}') | reject('is_hidden_entity')`:"label_entities('in_summaries')"}function gen_count_badge(e,t,n=null){const i=device_class_settings[e];let a="",r="";return null==n?(a=`{{ ${t} }}`,r=`{{ 'display: none' if ${t}|int==0 }}`):(a=`${t}{{ ${n} }}`,r=`${t}{{ 'display: none' if ${n}|int==0 }}`),{type:"custom:mod-card",card:{type:"custom:mushroom-template-badge",content:a,icon:i[0],color:i[1],tap_action:{action:"navigate",navigation_path:`/${dashboard_name}/${i[2]}`}},card_mod:{style:`ha-card { ${r} }`}}}function gen_range_badge(e,t){const n=device_class_settings[e],i=badge_entities(t);let a="";a=t?`${t.area_id}_${e}`:e;const r=`\n        expand(${i}) |\n        selectattr('attributes.device_class', 'defined') |\n        selectattr('attributes.device_class', 'eq', '${e}') |\n        selectattr('entity_id', 'has_value') |\n        list |\n        count\n      `;return{type:"custom:mod-card",card:{type:"custom:mushroom-template-badge",content:`\n{% set s = expand(${i})|\n   selectattr('attributes.device_class', 'defined')|\n   selectattr('attributes.device_class', 'eq', '${e}')|\n   selectattr('state', 'is_number')|\n   map(attribute='state')|\n   map('round')|\n   list\n%}\n{% set l, h = min(s), max(s) %}\n{% set d = (l - h)|abs() %}\n{{ h if d < 2 else l|string + '-' + h|string }}`,icon:n[0],color:n[1],tap_action:{action:"navigate",navigation_path:`/${dashboard_name}/${a}`}},card_mod:{style:`ha-card { {{ 'display: none' if ${r}|int==0 }} }`}}}function gen_alarm_control_panel_badge(e,t){return gen_count_badge(e,`\n        ${badge_entities(t)} |\n        select('match', '${e}\\.') |\n        reject('is_state', 'disarmed') |\n        list |\n        count`)}function gen_climate_badge(e,t){return gen_count_badge(e,`\n        ${badge_entities(t)} |\n        select('match', '${e}\\.') |\n        expand |\n        selectattr('attributes.hvac_action', 'defined') |\n        selectattr('attributes.hvac_action', 'ne', 'idle') |\n        selectattr('entity_id', 'has_value') |\n        map(attribute='entity_id') |\n        list |\n        count`)}function gen_cover_badge(e,t){return gen_count_badge(e,`\n{% set c = ${badge_entities(t)}\n   |select('match', '${e}\\.')\n   |expand\n   |rejectattr('attributes.device_class', 'in', [${sec_dev_cls_str}])\n   |selectattr('entity_id', 'has_value')\n   |list\n%}\n{% set open = c\n   |rejectattr('attributes.device_class', 'in', [${rev_open_close_str}])\n   |rejectattr('state', 'eq', 'closed')\n   |list\n%}\n{% set closed = c\n   |selectattr('attributes.device_class', 'in', [${rev_open_close_str}])\n   |rejectattr('state', 'eq', 'open')\n   |list\n%}`,"(open+closed)|list|count")}function gen_fan_badge(e,t){return gen_count_badge(e,`\n        ${badge_entities(t)} |\n        select('match', '${e}\\.') |\n        select('is_state', 'on') |\n        list |\n        count`)}function gen_humidity_badge(e,t){return gen_range_badge(e,t)}function gen_irrigation_badge(e,t){return gen_count_badge(e,`\n        ${badge_entities(t)} |\n        select('match', 'switch\\.') |\n        expand |\n        selectattr('attributes.sprinkler_head_type', 'defined') |\n        selectattr('entity_id', 'has_value') |\n        map(attribute='entity_id') |\n        select('is_state', 'on') |\n        list |\n        count`)}function gen_light_badge(e,t){let n=badge_entities(t);return null!=t&&(n+=" |\n            expand |\n            rejectattr('attributes.entity_id', 'defined') |\n            map(attribute='entity_id')"),gen_count_badge(e,`\n        ${n} |\n        select('match', '${e}\\.') |\n        select('is_state', 'on') |\n        list |\n        count`)}function gen_media_player_badge(e,t){return gen_count_badge(e,`\n        ${badge_entities(t)} |\n        select('match', '${e}\\.') |\n        select('is_state', 'playing') |\n        list |\n        count`)}function gen_motion_badge(e,t){return gen_count_badge(e,`\n        ${badge_entities(t)} |\n        select('match', 'binary_sensor\\.') |\n        expand |\n        selectattr('attributes.device_class', 'defined') |\n        selectattr('attributes.device_class', 'eq', 'motion') |\n        selectattr('entity_id', 'has_value') |\n        map(attribute='entity_id') |\n        select('is_state', 'on') |\n        list |\n        count`)}function gen_security_badge(e,t){const n=badge_entities(t);return gen_count_badge(e,`\n{% set l = ${n}\n   |select('match', 'lock\\.')\n   |reject('is_state', 'locked')\n   |expand\n   |list\n%}\n{% set b = ${n}\n   |select('match', 'binary_sensor\\.')\n   |expand\n   |selectattr('attributes.device_class', 'defined')\n   |selectattr('attributes.device_class', 'in', [${sec_dev_cls_str}])\n   |rejectattr('state', 'eq', 'off')\n   |list\n%}\n{% set c = ${n}\n   |select('match', 'cover\\.')\n   |expand\n   |selectattr('attributes.device_class', 'defined')\n   |selectattr('attributes.device_class', 'in', [${sec_dev_cls_str}])\n   |rejectattr('state', 'eq', 'closed')\n   |list\n%}`,"(l+b+c)|selectattr('entity_id', 'has_value')|list|count")}function gen_temperature_badge(e,t){return gen_range_badge(e,t)}function gen_view_header(e=null){const t={layout:"responsive",badges_wrap:"scroll"};return null!=e&&(t.card={type:"heading",heading_style:"title",heading:e,card_mod:{style:"ha-card div.content.title {\n                      font-size: 28px;\n                      font-weight: 692;\n                      line-height: 32px;\n                      color: white;\n                    }"}}),t}function gen_section_header(e,t=null,n=!1){const i={type:"heading",heading_style:"title",heading:e,card_mod:{style:`ha-card div.content.title {\n                    color: {{ 'grey' if ${n} else 'white' }};\n                    font-size: 18px;\n                    font-weight: 450;\n                  }`}};return t&&(i.tap_action={action:"navigate",navigation_path:`/${dashboard_name}/${t}`}),i}function gen_home_sections(e){const t=[],n=entities.filter((e=>e&&e.labels.includes("favorite"))),i=entities.filter((e=>e&&e.labels.includes("on_home_view")));if(n.length){let e=[gen_section_header("Favorites")];e.push(...n.map((e=>gen_entity_card(e)))),t.push({type:"grid",cards:e})}if(i.length)for(const n of areas){let a=[gen_section_header(n.name,n.area_id)];a.push(...i.filter((e=>e.area_id==n.area_id)).map((t=>gen_entity_card(t,e)))),t.push({type:"grid",cards:a})}return t.filter((e=>e.cards.length>1))}function gen_view_sections(e){const t=[];for(const n of areas){let i=entities.filter((t=>t.area_id==n.area_id&&e.domains&&e.domains.includes(t._domain)));if(i){let a=[gen_section_header(n.name,n.area_id)];a.push(...i.map((t=>gen_entity_card(t,e)))),t.push({type:"grid",cards:a})}}return t.filter((e=>e.cards.length>1))}function gen_area_sections(e){const t=[],n=entities.filter((t=>t.area_id==e.area_id));for(const e of views){if("home"==e.area_id)continue;let i=n.filter((t=>e.domains&&e.domains.includes(t._domain)));if(i.length){let n=[gen_section_header(e.name,e.area_id)];n.push(...i.map((e=>gen_entity_card(e,view)))),t.push({type:"grid",cards:n})}}return t.filter((e=>e.cards.length>1))}function gen_list_sections(e,t=null){let n=[],i=[],a=entities.filter((t=>get_attr(t,"device_class")==e));if(i=null!=t?a.filter((e=>e.area_id==t)):a.filter((e=>e.labels.includes("in_summaries"))),i.length)for(const e of areas)if(null==t||t==e.area_id){let t=[gen_section_header(e.name,e.area_id,!0)];t.push(...i.filter((t=>t.area_id==e.area_id)).map((t=>gen_entity_card(t,e)))),n.push({type:"grid",cards:t})}return n.filter((e=>e.cards.length>1))}function gen_view(e){let t=[];const n={header:gen_view_header(e.name)},i=view_badges[e.area_id]||[];return i.length>0&&(n.badges=i.map((e=>gen_badge(e)))),t="home"==e.area_id?gen_home_sections(e):gen_view_sections(e),t.length>0&&(n.sections=t),n}function gen_area(e){let t=[];const n={header:gen_view_header()},i=view_badges[e.area_id]||view_badges.__all_areas||[];return i.length>0&&(n.badges=i.map((t=>gen_badge(t,e)))),t=gen_area_sections(e),t.length>0&&(n.sections=t),n}function gen_list(e,t=null){let n=[];const i={header:gen_view_header()};return n=gen_list_sections(e,t),n.length>0&&(i.sections=n),i}function genit(){if(views.indexOf(view)>=0)return gen_view(view);if(areas.indexOf(view)>=0)return gen_area(view);if(lists.indexOf(view)>=0){const e=view.area_id;if(["temperature","humidity"].includes(e))return gen_list(e);const t=e.split("_"),n=t.slice(0,-1).join("_");return gen_list(t.slice(-1)[0],n)}return{}}return genit()}}customElements.define("ll-strategy-dashboard-homekit-dashboard",StrategyHomekitDashboard),customElements.define("ll-strategy-view-homekit-dashboard",StrategyHomekitDashboardView)})();